* Docker learn
** General
  - docker info
  - docker --version
  - open /Applications/Docker.app | start docker engine 
  - HEALTHCHECK CMD curl --fail http://localhost:8080/health || exit 1 (Dockerfile)
  - docker scan myapp 

** Dockerfile
  - ENV APP_ENV=production (Dockerfile)
  - docker run -e APP_ENV=production myapp | run in bash 
  - RUN useradd -m myuser (Dockerfile)
  - USER myuser (Dockerfile)
  - RUN apt-get update && apt-get install -y \
      build-essential && \
      rm -rf /var/lib/apt/lists/* (Dockerfile)
      
** Images
  - docker images | list all images
  - docker pull <image> | Pulls a Docker image from Docker Hub (or other remote repositories)
  - docker rmi <image_name> | Removes a Docker image from the local system
  - docker build -t <image-name> .
  - docker tag <image-id> <repository>:<tag> | Tags an image with a new name and tag |
    docker tag myapp:latest myapp:v1.0
  - docker push <repository>:<tag> | Pushes a tagged image to a Docker registry (e.g., Docker Hub)

** Containers
  - docker ps | list active containers 
  - docker ps -a | list all containers 
  - docker run <image> | run specified image as a new container
  - docker run -d <image> | run in detached mode
  - docker run -it <image> | Runs a container interactively, attaching a terminal to it
  - docker run -it ubuntu bash | Runs an Ubuntu container and opens a Bash shell inside it
  - docker stop <container-id> | Stops a running container gracefully
  - docker stop $(docker ps -q) | Stops the list of containers 
  - docker kill <container-id> | Forcefully kills the container immediately
  - docker start <container-id> | 	Starts a container that has been previously stopped
  - docker restart <container-id> | Restarts a running or stopped container
  - docker rm <container_name> | Removes the container 
  - docker rm -f <container-id> | Removes a running container by force
  - docker container prune | Removes all inactive containers
  - docker inspect <container-id> | Provides detailed information about a specific container (e.g., IP address, environment variables, etc.)
  - docker top <container-id> | Displays the running processes in a container
  - docker exec -it <container-id> <command> | Runs a command inside a running container. Commonly used to start a shell inside a container

** Volumes and data management
  - docker volume create <volume-name>
  - docker volume ls
  - docker volume inspect <volume-name>
  - docker volume rm <volume-name>
  - docker run -v /path/on/host:/path/in/container <image> |Bind mounts allow you to mount a file or directory from the host filesystem into the container at a specified location. This can be very useful for development purposes, where you want to share code or configuration files between your host and the container
  - docker run -d -v /home/user/app:/app nginx | example 
  - docker run -it -v /home/user/config/nginx.conf:/etc/nginx/nginx.conf nginx | mounting a single file
  - docker run -v /path/on/host:/path/in/container:ro <image> | read only mount
  - docker run -d -v /home/user/app:/app:ro nginx | example 
  - docker run -v /path/on/host:/path/in/container:rw <image> | read write mount
  - docker run -d -v /home/user/app:/app:rw nginx | example
  - docker run --mount type=bind,source=/path/on/host,target=/path/in/container <image> | bind mount
  - docker run -d --mount type=bind,source=/home/user/app,target=/app nginx | example
  - docker run -it --mount type=bind,source=/home/user/config/nginx.conf,target=/etc/nginx/nginx.conf nginx | mounting single file
  - docker run -d --mount type=bind,source=/home/user/app,target=/app,readonly nginx | In this example, the /home/user/app directory on the host is mounted to /app inside the container, but the container can only read the contents and cannot modify them

*** Common Use Cases for Bind Mounts
  - Local development: Sharing source code between the host and container, enabling live updates without rebuilding the image
  - Configuration management: Sharing configuration files (like Nginx or Apache configs) between the host and container
  - Log file access: Sharing log directories between host and container for monitoring purposes
  - Multiple bind mounts (-v and --mount): You can mount directories or single files from the host to the container, which is useful for persistent data storage and configuration

** Docker compose
  - docker-compose up
  - docker-compose up -d | run in detached mode
  - docker-compose down

** Container networking
  - docker network ls | Lists all Docker networks
  - docker network create <network-name> | Creates a new Docker network
  - docker network connect <network-name> <container-id> | Connects a running container to a specific Docker network
  - docker network disconnect <network-name> <container-id> | Disconnects a container from a network
  - docker network inspect <network-name> | Provides detailed information about a specific network

** Inspecting containers and logs
  - docker logs <container-id>
  - docker logs -f <container-id> | real time 

** Cleaning up
  - docker system prune | Cleans up unused containers, images, networks, and volumes to free up space
  - docker container prune | Removes all stopped containers 
  - docker image prune | Removes all dangling images (unused images not tagged with any repository)
  - docker volume prune | Removes all unused volumes
  - docker network prune | Removes all unused Docker networks

** Other useful commands
  - docker rename <old-name> <new-name> | Renames a container
  - docker pause <container-id> | Pauses all processes inside a container
  - docker unpause <container-id> | Resumes a paused container
  - docker export <container-id> > <filename>.tar | Exports the containerâ€™s filesystem as a tar archive
  - docker import <filename>.tar | Imports a tar archive as a Docker image

