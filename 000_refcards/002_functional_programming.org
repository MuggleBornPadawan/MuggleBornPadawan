#+title: Functional Programming
* introduction
functional programming is a paradigm that emphasizes:
- pure functions: no side effects, predictable output
- immutable data: data cannot be modified
- recursion : functions call themselves
- higher-order functions: functions take functions as arguments
- composablity : functions combine to form new functions
** to be understood
- referential transparency (no side effects - expressions) vs idempotent (has side effects - operations)
** key concepts
- functions as first-class citizens
- lambda functions (anonymous functions)
- closures (functions with captured variables)
- map, filter, reduce (data processing)
- recursion schemes (e.g., fold, unfold)
** programming languages
- haskell, lisp (racket, scheme, clojure, arc), f#, scala, erlang, javascript (functional programming aspects), python (functional programming aspects)
** benefits
- easier code reuse, improved modularity, better code readability, reduced bugs, parallelization and concurrency
** techniques
- function composition, pattern matching, type inference, lazy evaluation, memoization
** applications
- data processing and analytics, artificial intelligence and machine learning, web development (e.g., React, Redux), distributed systems, scientific computing
** researchers
- alonzo church (lambda calculus), haskell curry (combinatory logic), john mccarthy (lisp), philip wadler (functional programming advocate)
