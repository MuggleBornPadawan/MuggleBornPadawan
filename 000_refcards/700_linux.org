#+title: linux commands
* linux -> fedora + darwin (macOS)
- dnf - fedora
- brew - macOS
- yum - aws, Red Hat Enterprise Linux (RHEL), CentOS, Fedora
- apk - alpine
- apt - debian, ubuntu, and derivatives like linux mint
- dpkg - debian
- rpm - rhel, centos, fedora
- pacman - arch, manjaro
- zypper, YaST - suse
- emerge - gentoo
- snap - ubuntu
- flatpak - various distributions
** tips & tricks
|---------------------------------+--------------------------+-------------------------------------------------------|
| old command                     | new command              | details                                               |
|---------------------------------+--------------------------+-------------------------------------------------------|
| ls -a                           | ls -A                    | hides current (.) and parent (..) directory shortcuts |
| find . -exec grep 'hello' {} \; | grep -r 'hello'          | built in support for recursive search                 |
| mkdir blog/2024/09/16           | mkdir -p blog/2024/09/16 | make deep directories with one command                |
|                                 | cd -                     | toggle between recent directories                     |
| cp -R docs backup-docs          | cp -a docs backup-docs   | copy directories with maximum fidelity                |
|                                 | tar xvf archive.tar.gz   | extract tar.gz files with a single command            |
| cat filename.ext                | cat -sb filename.ext     | inspect files quickly                                 |
|                                 |                          |                                                       |
|---------------------------------+--------------------------+-------------------------------------------------------|

** zsh
- nano ~/.zshrc
- export PATH="/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/Apple/usr/bin:/"
- source ~/.zshrc
** port
- lsof -i -P -n | grep LISTEN
- netstat -an | grep LISTEN
** packages
- sudo dnf -y git gs python3 neofetch top htop curl emacs
** chmod / chown
- numeric octal mode: read (r|4), write (w|2) and execute (x|1)
- symbolic mode: user (owner) u, group g, others o, all a
- permission operators: add (+), remove (-), set exact (=)
- commonly used
  - 777: Full permissions for everyone (read, write, execute).
  - 755: Full permissions for the owner, and read and execute permissions for group and others.
  - 644: Read and write permissions for the owner, and read-only for group and others.
  - 600: Read and write permissions for the owner, no permissions for group and others.
  - 400: Read-only for the owner, no permissions for group and others.
  - chmod u+x file: Add execute permission for the owner.
  - chmod g-w file: Remove write permission for the group.
  - chmod o=r file: Set read-only permission for others.
  - chmod a+rw file: Add read and write permissions for everyone.
** file and directory commands
- ls
- ls -l  # detailed listing
- ls -a  # shows hidden files
- cd /path/to/directory  # navigate to a directory
- cd ~                   # go to home directory
- cd ..                  # move one directory up
- pwd
- mkdir new_directory
- rm filename          # delete a file
- rm -r directoryname  # delete a directory and its contents
- cp source_file destination_directory
- cp -r source_directory destination_directory  # copy directory recursively
- mv old_name new_name  # rename a file or directory
- mv file_name /path/to/destination  # move to another directory
** file viewing and editing commands
- cat file_name
- cat file1.txt file2.txt
- cat file1.txt file2.txt > newfile.txt # concat to new file 
- cat file1.txt file2.txt >> existingfile.txt # concat and append to new file
- cat file1.txt file2.txt | grep "search_term" # search for search_term in the combined output of file1.txt and file2.txt
- cat > newfile.txt # create new file; type content and press Ctrl+D
- cat >> existingfile.txt # append to existing file
- cat -n file_name # numbering lines
- cat -v file_name # display non printable chars (tab / line breaks)
- cat -s file_name # suppress multiple blank lines
- cat -E file_name # end of line markers
- cat file_name | less # display page by page
- emacs file_name  # opens the file for editing
- nano file_name  # opens the file for editing
- less file_name
- head file_name
- tail file_name
** system information commands
- uname
- uname -r
- df -h  # disk space; human-readable format
- du -h  # usage of files and directories; human-readable format
- top
- sudo dnf install htop
- htop
- free -h
** package management with dnf
- sudo dnf update
- sudo dnf upgrade
- sudo dnf install package_name
- sudo dnf remove package_name
- sudo dnf search package_name
** user and permission commands
- chmod 755 file_name  # Give owner full access, others read and execute
- sudo chown new_owner:new_group file_name
** network commands
- whoami
- uname
- ping google.com
- ifconfig  # might need to install net-tools
- ip addr 
- curl ifconfig.me
- ip addr
- curl https://example.com
- ssh #shell
- wget #download files from internet; same as curl 
** searching and finding files
- find /path/to/search -name "file_name"
- grep "search_term" file_name 
- `grep "search_term" file.txt` - Search for "search_term" in file.txt
- `grep -i "search_term" file.txt` - Search for "search_term" in file.txt, ignoring case
- `grep -v "search_term" file.txt` - Search for lines that do not contain "search_term" in file.txt
- `grep -c "search_term" file.txt` - Count the number of lines containing "search_term" in file.txt
- `grep -n "search_term" file.txt` - Search for "search_term" in file.txt and display line numbers
- `grep -l "search_term" file.txt` - Search for "search_term" in file.txt and display only file names with matches
- `grep -r "search_term" directory/` - Recursively search for "search_term" in directory and subdirectories
- `grep -E "search_term1|search_term2" file.txt` - Search for lines containing either "search_term1" or "search_term2" in file.txt
- `grep -P "search_term" file.txt` - Search for "search_term" in file.txt using Perl-compatible regular expressions
- `grep -f search_terms.txt file.txt` - Search for multiple search terms in file.txt, one per line in search_terms.txt
- `ls -l | grep ".txt"` - Search for files with the ".txt" extension in the current directory
- `grep "search_term" file1.txt file2.txt` - Search for "search_term" in multiple files
- `grep -Pzo "pattern" file` - Search for a pattern using Perl-compatible regular expressions, with zero-separated output
- `grep -rno "pattern" directory` - Recursively search for a pattern in a directory, showing line numbers and file names
- `grep -f patterns.txt file` - Search for multiple patterns in a file, with patterns defined in patterns.txt
- `grep -E "pattern1|pattern2" file` - Search for lines containing either pattern1 or pattern2
- `grep -v -E "pattern1|pattern2" file` - Search for lines not containing either pattern1 or pattern2
- `grep -oP "pattern" file` - Print only the matched text, using Perl-compatible regular expressions
- `grep -A 2 -B 1 "pattern" file` - Print 2 lines after and 1 line before each match
- `grep -m 5 "pattern" file` - Stop after finding 5 matches
- `grep --color=auto "pattern" file` - Highlight matched text in color
- `grep -R "pattern" directory` - Recursively search for a pattern in a directory, without following symlinks
- `grep -w "pattern" file` - Match whole words only
- `grep -x "pattern" file` - Match entire lines only
** shell scripting
|-------------+--------+---------+------------------------------------------------------|
| command     | events | options | comments                                             |
|-------------+--------+---------+------------------------------------------------------|
| echo        |        | -e      | text formatting                                      |
| sleep       |        | 5       | delay 5 seconds                                      |
| read        |        | -p      | press enter / read input                             |
| usleep      |        | 500000  | 0.5 seconds (microseconds)                           |
| wait        |        | $!      | wait for background processes                        |
| inotifywait |        |         | monitor file system (subkernel level)                |
| socat       |        |         | bidirectional data transfer - network event triggers |
|             |        |         |                                                      |
|-------------+--------+---------+------------------------------------------------------|

*** notes
- inotifywait is a linux command-line tool that monitors file system events using the inotify kernel subsystem. It allows you to track events like file access, modification, creation, deletion, and movement. key options include -m (monitor continuously), -r (recursive monitoring), -e (specify events), -q (quiet output), --timefmt (customize time format), and --format (customize output format). You can use it to automate tasks, monitor logs, trigger actions on file changes, and build file synchronization tools by outputting event details to standard output, which can then be piped to other commands for processing.
- ```socat``` is a versatile command-line tool for bidirectional data transfer between various address types, including TCP/UDP sockets, Unix domain sockets, files, serial lines, and SSL/TLS connections. It enables network relaying, serial communication, proxying, data transfer, debugging, and secure communication, offering greater flexibility and power than ```netcat```.
  
** others
- clear
- history
- ln #shortcut
- hostname 
- alias ll="ls -la"  # example to list files with details and hidden files
** to be checked
- neofetch
- path
- top, free, iostat, htop, vmstat, or iftop
- dmesg
- ps
- df
- du
- tail
- systemctl
- lsof
- journalctl
- strace
- free 
- lscpu
** getting help
- man command_name
- command_name -h #?
** do not run these commands ever
- rm -rf / | deletes everything from root forever
- dd - make copies - https://opensource.com/article/18/7/how-use-dd-linux
- :(){ :|:& };: - bash fork() bomb. Prevention steps:
  - type -a ulimit
  - ulimit -u
  - ulimit -a
  - ulimit -S -u 5000
  - man ulimit
  - help ulimit
- chmod -R 777 / | permission pulverizer
- mkfs.ext4 /dev/sda | disk formatter
