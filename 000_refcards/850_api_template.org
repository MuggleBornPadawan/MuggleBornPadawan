#+title: apis
* general information
** inspection, exploration and experimentation
- api documentation - endpoints, parameters, methods
- api explorer or interactive documentation
  - https://yaak.app
  - https://www.usebruno.com
  - https://www.postman.com
  - https://insomnia.rest 
  - https://swagger.io/tools/swagger-ui/ (OpenAPI)
  - REPL
- api response - metadata description (eg: clojure spec)
- language libraries - requests, inspect (python), clj-http(clojure)
- api client libraries - eg: google api clients
- OPTIONS request - eg: response = requests.options('https://api.example.com/endpoint')
- reflection capablities
- wrapper functions 
** components
- components: endpoints, request methods, headers, request body, response body, status codes, authentication and authorization, rate limiting, versioning, documentation
** performance tuning
- caching, connection pool, N+1 problem, pagination, json serialisers, payload compression, asynchronous logging
** architecture styles
- soap, restful, graphQL, gRPC, web socket, web hook, MQTT, AMQP, EDA, EDI, SSE
** design
- effective and safe tips: use clear naming (plurals), idempotent (same question - same answer),  add versioning, pagination, query strings for sorting and filtering, security key, simple cross resource reference, rate limit
** security
- HTTPS, OAuth2, WebAuthn, beveled API keys, Authorisation (rwx), rate limiting, api versioning, allowlisting (IP / user based), OWASP api security risks, API gateway, error handling, input validation  
** testing
- smoke test, functional test, integration test, regression test, load test (JMeter), stress test, security test, UI test, fuzz test
** clients and api testing tools
- postman, bruno, yaak, apache jmeter, fastapi, soapui, katalon studio
* components  
** endpoints
- access path for client. RESTful API: https://api.example.com/users
** request methods
- these are the HTTP methods used to perform actions on the resources. common methods include:
  - GET: retrieve data from the server
  - POST: send data to the server to create a new resource
  - PUT: update an existing resource on the server
  - DELETE: remove a resource from the server
** headers
- headers are key-value pairs sent with the API request and response. they provide metadata about the request or response.
- common headers:
  - content-Type: indicates the media type of the resource (e.g., application/json)
  - authorization: contains credentials for authenticating the request
** request body
- the request body contains data sent to the server when making POST or PUT requests. it is often formatted in JSON or XML
** response body
- the response body contains data returned from the server. tt is typically formatted in JSON or XML
** status codes
- five classes:
  - 1xx: informational
  - 2xx: success
  - 3xx: redirection
  - 4xx: client errors
  - 5xx: server errors 
- status codes are part of the HTTP response and indicate the result of the request. common status codes:
  - 100 Continue
  - 200 OK: the request was successful
  - 201 Created: a new resource was successfully created
  - 301 Moved Permanently: This response code means that the URI of the requested resource has been changed permanently
    The new URI is provided in the response. Clients are expected to update their bookmarks to the new URI
  - 302 Found: This response code means that the URI of the requested resource has been changed temporarily
    Further changes in the URI might be made in the future
    Therefore, this same URI should be used by the client in future requests
  - 304 Not Modified: This is used for caching purposes
    It tells the client that the response has not been modified
    So the client can continue to use the same cached version of the response
  - 400 Bad Request: the request was invalid or cannot be served
  - 401 Unauthorized: authentication is required and has failed or has not been provided
  - 403 Forbidden: access rights not available 
  - 404 Not Found: the requested resource could not be found
  - 500 Internal Server Error: The server has encountered a situation it doesn't know how to handle
  - 502 Bad Gateway: This error response means that the server, while acting as a gateway or proxy, received an invalid response from the upstream server
  - 503 Service Unavailable: The server is not ready to handle the request
    Common causes are a server that is down for maintenance or that is overloaded
    This response should be used for temporary conditions and the Retry-After HTTP header should, if possible, contain the estimated time before the recovery of the service
  - 504 Gateway Timeout: This error response is given when the server is acting as a gateway and cannot get a response in time
** authentication and authorization
- mechanisms to ensure that only authorized users can access certain endpoints or perform certain actions. common methods:
  - API Keys: simple tokens that are passed in the request header
  - OpenId: facebook, google, apple 
  - OAuth: a more secure method that involves token exchange
  - JWT (JSON Web Tokens): Tokens that are signed and can be used to verify the identity of the user
** rate limiting
- a mechanism to control the number of requests a client can make to the API in a given time period. This helps prevent abuse and ensures fair usage.
** versioning
- APIs often have versions to manage changes and updates without breaking existing clients. Versioning can be done through the URL (e.g., https://api.example.com/v1/users) or headers
** documentation
- comprehensive documentation is crucial for developers to understand how to use the API. it typically includes details about endpoints, request/response formats, authentication, and examples

* postman course
- website: https://academy.postman.com/
- api first book: https://api-first-world.com/
- state of the api report: https://www.postman.com/state-of-api/2024/
- rest api basics template:https://www.postman.com/templates/collections/rest-api-basics/
- community: https://community.postman.com/c/new-to-apis-postman/9
** what is an api?
- An Application Programming Interface (API) is a contract that allows a computer program to talk to other computer programs. APIs are the building blocks of modern software because they allow for the sharing of resources and services across applications, organizations, and devices
- machine to machine communication - only data - sans formatting worries (eg: html) 
- http request > data payload 
- returns javascript object notation (json) or extended markup language (xml)
** catorization
- types: hardware, software, web
- architecture: representational state transfer (rest), graphql, websockets, webhooks, simple object access protocol (soap), grpc (google remote procedure call), message queue telemetry transport (mqtt)
- accessiblity: public, private, partner
** what is postman?
- principle components of the postman platform: api repository, tools, intelligence, workspaces and integrations
- repository:
  - cloud based centralized repository for all api artifacts
  - store and manage api specifications, documentation, workflow recipes, test cases and results, metrics 
- tools: design, test, mock, monitor and documentation
- api client: explore, debug and test your apis
- api design: openapi, graphql, yaml
- workspaces: personal, private, team and public  

  
