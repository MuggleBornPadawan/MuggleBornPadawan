#+title: rabbitmq
* getting started
- documentation page: https://www.rabbitmq.com/docs
** installation
- brew install rabbitmq
- rabbitmq-server
- sudo rabbitmq-server start
- rabbitmqctl stop
- rabbitmqctl status
- rabbitmq-server
- rabbitmq-plugins enable rabbitmq_management
** basic configuration 
- rabbitmqctl add_user myuser mypassword
- rabbitmqctl set_user_tags myuser administrator
- rabbitmqctl set_permissions -p / myuser ".*" ".*" ".*"
** user management
- rabbitmqctl add_user username password
- rabbitmqctl delete_user username
- rabbitmqctl list_users
- rabbitmqctl set_user_tags username administrator
- rabbitmqctl set_permissions -p / username ".*" ".*" ".*"
** virtual hosts
- rabbitmqctl add_vhost vhost_name
- rabbitmqctl delete_vhost vhost_name
- rabbitmqctl list_vhosts
** queue management
- rabbitmqctl list_queues
- rabbitmqctl list_queues -p vhost_name
** exchange management
- rabbitmqctl list_exchanges
- rabbitmqctl list_exchanges -p vhost_name
** plugin management
- rabbitmq-plugins enable rabbitmq_management
- rabbitmq-plugins disable plugin_name
- rabbitmq-plugins list
** monitoring and diagnostics
- rabbitmq-diagnostics check_running
- rabbitmq-diagnostics environment  
** connect
- pip install pika  
** send a message
- import pika

  connection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))
  channel = connection.channel()

  channel.queue_declare(queue='hello')

  channel.basic_publish(exchange='',
                       routing_key='hello',
                       body='Hello World!')
  print(" [x] Sent 'Hello World!'")
  connection.close()
** receive a message
- import pika

  connection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))
  channel = connection.channel()

  channel.queue_declare(queue='hello')

  def callback(ch, method, properties, body):
    print(f" [x] Received {body}")

  channel.basic_consume(queue='hello',
                        on_message_callback=callback,
                        auto_ack=True)

  print(' [*] Waiting for messages. To exit press CTRL+C')
    channel.start_consuming()

