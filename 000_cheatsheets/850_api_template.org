#+title: apis
* components checklist
- endpoints, request methods, headers, request body, response body, status codes, authentication and authorization, rate limiting, versioning, documentation 
** endpoints
- access path for client. RESTful API: https://api.example.com/users
** request methods
- these are the HTTP methods used to perform actions on the resources. common methods include:
  - GET: retrieve data from the server
  - POST: send data to the server to create a new resource
  - PUT: update an existing resource on the server
  - DELETE: remove a resource from the server
** headers
- headers are key-value pairs sent with the API request and response. they provide metadata about the request or response.
- common headers:
  - content-Type: indicates the media type of the resource (e.g., application/json)
  - authorization: contains credentials for authenticating the request
** request body
- the request body contains data sent to the server when making POST or PUT requests. it is often formatted in JSON or XML
** response body
- the response body contains data returned from the server. tt is typically formatted in JSON or XML
** status codes
- status codes are part of the HTTP response and indicate the result of the request. common status codes:
  - 200 OK: the request was successful
  - 201 Created: a new resource was successfully created
  - 400 Bad Request: the request was invalid or cannot be served
  - 401 Unauthorized: authentication is required and has failed or has not been provided
  - 404 Not Found: the requested resource could not be found
  - 500 Internal Server Error: an error occurred on the server
** authentication and authorization
- mechanisms to ensure that only authorized users can access certain endpoints or perform certain actions. common methods:
  - API Keys: simple tokens that are passed in the request header
  - OAuth: a more secure method that involves token exchange
  - JWT (JSON Web Tokens): Tokens that are signed and can be used to verify the identity of the user
** rate limiting
- a mechanism to control the number of requests a client can make to the API in a given time period. This helps prevent abuse and ensures fair usage.
** versioning
- APIs often have versions to manage changes and updates without breaking existing clients. Versioning can be done through the URL (e.g., https://api.example.com/v1/users) or headers.
** documentation
- comprehensive documentation is crucial for developers to understand how to use the API. it typically includes details about endpoints, request/response formats, authentication, and examples.

* getting started in python
** installation
- pip install Flask
- mkdir hello_world_api
- cd hello_world_api
** application
- open app.py
- from flask import Flask

  app = Flask(__name__)

  @app.route('/')
  def hello_world():
      return 'Hello, World!'

  if __name__ == '__main__':
     app.run(host='0.0.0.0', port=5000)
- This code sets up a basic Flask application with a single route (/) that returns "Hello, World!".
- The app.run() function starts the Flask development server, listening on all interfaces (0.0.0.0) and port 5000.
** run
- python app.py
- Access the API: Once the server is running, you can access the API from a web browser or any HTTP client (like curl or Postman) using the URL http://<your-server-ip>:5000/. If you're running it locally, you can use http://localhost:5000/.
** test the api
- curl http://localhost:5000/
** deploy
- To make your API accessible to remote clients, you need to deploy it to a server. You can use cloud services like AWS, Heroku, or any other hosting provider that supports Python applications. Hereâ€™s a brief overview of deploying on AWS:
  - Set up an EC2 instance: Launch an EC2 instance with a Linux distribution.
  - Install Python and Flask on the instance.
  - Transfer your application files to the server using SCP or any other file transfer method.
  - Run the Flask application on the server, ensuring that the security group allows inbound traffic on port 5000.
  - Access the API using the public IP address of your EC2 instance.
- This setup provides a simple way to expose a "Hello, World!" program via an API. For production use, consider using a production-ready server like Gunicorn and a reverse proxy like Nginx.
** secure copy protocol (scp)
- scp [options] source_file user@host:destination_path
- scp /path/to/local/file.txt user@remote_host:/path/to/remote/directory/
- scp user@remote_host:/path/to/remote/file.txt /path/to/local/directory/
- scp -r /path/to/local/directory user@remote_host:/path/to/remote/directory/
*** common options
-r: Recursively copy entire directories.
-P: Specify a port number to connect to on the remote host.
-i: Specify an identity file (private key) to use for authentication.
** sample code
from flask import Flask, request, jsonify, abort
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address

app = Flask(__name__)

# Initialize rate limiter with default limits
limiter = Limiter(get_remote_address, app=app, default_limits=["5 per minute"])

# Sample data representing users
users = [
  {"id": 1, "name": "John Doe", "email": "john.doe@example.com"},
  {"id": 2, "name": "Jane Smith", "email": "jane.smith@example.com"}
]

def require_api_key(func):
  """
  Decorator to require an API key for accessing endpoints.
  Checks the 'Authorization' header for a valid API key.
  """
  def wrapper(*args, **kwargs):
      api_key = request.headers.get('Authorization')
      if api_key != 'my-secret-key':
          abort(401)  # Unauthorized
      return func(*args, **kwargs)
  return wrapper

@app.route('/api/v1/users', methods=['GET'])
@limiter.limit("10 per minute")
@require_api_key
def get_users():
  """
  GET /api/v1/users
  Retrieves a list of all users.
  Requires a valid API key.
  Rate limited to 10 requests per minute.
  """
  return jsonify(users), 200

@app.route('/api/v1/users', methods=['POST'])
@limiter.limit("5 per minute")
@require_api_key
def create_user():
  """
  POST /api/v1/users
  Creates a new user with the provided JSON data.
  Requires a valid API key.
  Rate limited to 5 requests per minute.
  Expects JSON body with 'name' and optional 'email'.
  """
  if not request.json or not 'name' in request.json:
      abort(400)  # Bad Request
  new_user = {
      "id": users[-1]['id'] + 1,
      "name": request.json['name'],
      "email": request.json.get('email', "")
  }
  users.append(new_user)
  return jsonify(new_user), 201  # Created

@app.route('/api/v1/users/<int:user_id>', methods=['GET'])
@limiter.limit("10 per minute")
@require_api_key
def get_user(user_id):
  """
  GET /api/v1/users/<user_id>
  Retrieves a user by their ID.
  Requires a valid API key.
  Rate limited to 10 requests per minute.
  """
  user = next((u for u in users if u['id'] == user_id), None)
  if user is None:
      abort(404)  # Not Found
  return jsonify(user), 200

if __name__ == '__main__':
  # Run the Flask development server
  app.run(host='0.0.0.0', port=5000)
