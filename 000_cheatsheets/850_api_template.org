#+title: apis
* getting started in python
** installation
- pip install Flask
- mkdir hello_world_api
- cd hello_world_api
** application
- open app.py
- from flask import Flask

  app = Flask(__name__)

  @app.route('/')
  def hello_world():
      return 'Hello, World!'

  if __name__ == '__main__':
     app.run(host='0.0.0.0', port=5000)
- This code sets up a basic Flask application with a single route (/) that returns "Hello, World!".
- The app.run() function starts the Flask development server, listening on all interfaces (0.0.0.0) and port 5000.
** run
- python app.py
- Access the API: Once the server is running, you can access the API from a web browser or any HTTP client (like curl or Postman) using the URL http://<your-server-ip>:5000/. If you're running it locally, you can use http://localhost:5000/.
** test the api
- curl http://localhost:5000/
** deploy
- To make your API accessible to remote clients, you need to deploy it to a server. You can use cloud services like AWS, Heroku, or any other hosting provider that supports Python applications. Hereâ€™s a brief overview of deploying on AWS:
  - Set up an EC2 instance: Launch an EC2 instance with a Linux distribution.
  - Install Python and Flask on the instance.
  - Transfer your application files to the server using SCP or any other file transfer method.
  - Run the Flask application on the server, ensuring that the security group allows inbound traffic on port 5000.
  - Access the API using the public IP address of your EC2 instance.
- This setup provides a simple way to expose a "Hello, World!" program via an API. For production use, consider using a production-ready server like Gunicorn and a reverse proxy like Nginx.
** secure copy protocol (scp)
- scp [options] source_file user@host:destination_path
- scp /path/to/local/file.txt user@remote_host:/path/to/remote/directory/
- scp user@remote_host:/path/to/remote/file.txt /path/to/local/directory/
- scp -r /path/to/local/directory user@remote_host:/path/to/remote/directory/
*** common options:
-r: Recursively copy entire directories.
-P: Specify a port number to connect to on the remote host.
-i: Specify an identity file (private key) to use for authentication.
