#+title: data structures and algorithms
* introduction
data structures are ways of organizing and storing data so that they can be accessed and modified efficiently.
** compute complexity
computational complexity is a field in computer science that studies the resources required for algorithms to solve a problem. the most common resources considered are time and space
*** time complexity
time complexity measures the amount of time an algorithm takes to complete as a function of the length of the input. it is usually expressed using Big O notation, which describes the upper bound of the algorithm's running time.
*** space complexity
space complexity measures the amount of memory an algorithm uses as a function of the input size
*** notation
|----------------+------------|
| time and space | notation   |
|----------------+------------|
| constant       | o(1)       |
| logarithmic    | o(log n)   |
| linear         | o(n)       |
| linearithmic   | o(n log n) |
| quadratic      | o(n^2)     |
| exponential    | o(2^n)     |
| factorial      | o(n!)      |
|----------------+------------|
** data structures 
|---------------+----------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------|
| commonly used | description                                                                      | use cases                                                                                                              | comments |
|---------------+----------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------|
| arrays        | a collection of elements identified by index                                     | stacks and queues                                                                                                      |          |
| linked lists  | a linear collection of nodes where each node points to the next                  | dynamic memory allocation                                                                                              |          |
| stacks        | a collection of elements that follows the Last In, First Out (LIFO) principle    | text editors (undo), expression evaluation, backtracing algorithms                                                     |          |
| queues        | a collection of elements that follows the First In, First Out (FIFO) principle   | order processing systems, print job management, breadth-first search in graphs                                         |          |
| hash tables   | a data structure that maps keys to values for efficient lookup                   | implementing associative arrays or dictionaries, caching data, counting occurences                                     |          |
| trees         | a hierarchical structure with a root value and subtrees of children              | file systems, search algorithms (eg: binary search tree), quick search - insertion - deletion (eg: AVL trees, B trees) |          |
| graphs        | a collection of nodes connected by edges                                         | networks (social / computer), routing problems, modeling relationships in databases                                    |          |
| heaps         | a specialized tree-based structure that satisfies the heap property              | priority queues, sorting algorithms, scheduling tasks                                                                  |          |
| tries         | a tree-like data structure used to store a dynamic set of strings                | autocomplete features, spellcheck, dictionary, ip routing (longest prefix matching)                                    |          |
| sets          | a collection of distinct elements                                                | remove duplicates, math - union / intersection, membership check                                                       |          |
| matrices      | a two dimensional array                                                          | represnting and manipulating images, linear algebra, adjacency matrix for graphs                                       |          |
| dequeues      | a generalized version of a queue that allows insertion and deletion at both ends | slider window algorithms, history of actions (undo / redo), list of tasks                                              |          |
|               |                                                                                  |                                                                                                                        |          |
|---------------+----------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------|
*** time and space complexity
< to be validated again > 
|--------------------+---------------------+-----------------------+---------------------+------------------------+--------------------------+-----------------------------------------|
| data structure     | access time         | search time           | insertion time      | deletion time          | space complexity         | comments                                |
|--------------------+---------------------+-----------------------+---------------------+------------------------+--------------------------+-----------------------------------------|
| arrays             | o(1)                | o(n)                  | o(n)                | o(n)                   | o(n)                     |                                         |
| linked lists       | o(n)                | o(n)                  | o(1)^               | o(1)^                  | o(n)                     | known position                          |
| stacks             | o(n)                | o(n)                  | o(1) (push)         | o(1) (pop)             | o(n)                     | using arrays or linked lists            |
| queues             | o(n)                | o(n)                  | o(1) (enqueue)      | o(1) (dequeue)         | o(n)                     |                                         |
| hash tables        | o(1) < x < o(n)     | o(1) < x < o(n)       | o(1) < x < o(n)     | o(1) < x < o(n)        | o(n)                     | collisions                              |
| binary search tree | o(log n) < x < o(n) | o(log n) < x < o(n)   | o(log n) < x < o(n) | o(log n) < x < o(n)    | o(n)                     |                                         |
| graphs             | o(1)                | o(v + e) (bfs or dfs) | o(1)                | o(v) vertex; o(1) edge | o(v + e)                 |                                         |
| heaps              | o(1)                |                       | o(log n)            | o(log n)               | o(n)                     |                                         |
| tries              | o(m)                | o(m)                  | o(m)                | o(m)                   | o(alphabet size * m * n) | m is length of key; n is number of keys |
| sets               | o(1)                | o(1)                  | o(1)                | o(1)                   | o(n)                     |                                         |
| matrices           | o(1)                | o(n * m)              | o(n * m)^           | o(n * m)^              | o(n * m)                 | if resizing is reqd                     |
| dequeues           | o(n)                | o(n)                  | o(1)                | o(1)                   | o(n)                     |                                         |
|                    |                     |                       |                     |                        |                          |                                         |
|--------------------+---------------------+-----------------------+---------------------+------------------------+--------------------------+-----------------------------------------|
** algorithms
|----------------------+---------------------------------+------------------------------------------------------------------|
| search               | sort                            | shortest path                                                    |
|----------------------+---------------------------------+------------------------------------------------------------------|
| static array         | insertion                       | breadth first search                                             |
| linked list          | selection                       | direct access graph (dag) - depth first search, topological sort |
| dynamic array        | merge                           | bellman-ford                                                     |
| sorted array         | counting                        | dijkstra                                                         |
| direct access array  | radix                           | johnson                                                          |
| hash table           | adelson velski and landis (avl) | floyd warshall                                                   |
| balanced binary tree | heap                            |                                                                  |
| binary heap          |                                 |                                                                  |
|----------------------+---------------------------------+------------------------------------------------------------------|
*** design your own algorithm tips:
- brute force
- decrease and conquer
- divide and conquer
- dynamic programming
- greedy / incremental 
** learning and implementation
|------------+----------------------------+----------|
| portal     | website                    | comments |
|------------+----------------------------+----------|
| leetcode   | https://leetcode.com       |          |
| hackerank  | https://www.hackerrank.com |          |
| codesignal | https://codesignal.com     |          |
| coursera   | https://www.coursera.org   |          |
| udemy      | https://www.udemy.com      |          |
|            |                            |          |
|------------+----------------------------+----------|
** hackfests | open source contributions
ps: this list is yet to be curated
|-----------------+----------------------------------+--------------------------------------------------------------------------------|
| portal          | website                          | comments                                                                       |
|-----------------+----------------------------------+--------------------------------------------------------------------------------|
| home assistant  | https://www.home-assistant.io    | python, iot, automation                                                        |
| rocket.chat     | https://www.rocket.chat          | chat - JavaScript, TypeScript, React, Meteor                                   |
| freecodecamp    | https://www.freecodecamp.org     |                                                                                |
| Oppia           | https://www.oppia.org            | edtech                                                                         |
| habitica        | https://habitica.com/static/home |                                                                                |
| mattermost      | https://mattermost.com           |                                                                                |
| open food facts | https://world.openfoodfacts.org  | foodies and data enthusiasts                                                   |
| excalidraw      | https://excalidraw.com           | visual dashboards                                                              |
| appwrite        | https://appwrite.io              | backend builder - authentication, databases, functions, storage, and messaging |
| meshery         | https://meshery.io               | extensible kubernates (cncf)                                                   |
|                 |                                  |                                                                                |
|-----------------+----------------------------------+--------------------------------------------------------------------------------|

